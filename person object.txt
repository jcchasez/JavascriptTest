Javascript only done the client site of the web.
php server site

useful examples:
-console.log('42'-2); ==>40
-console.log('42'+2); concanate, make 2 to string==>422
-console.log(parseInt('42')+2); ==> 44
-console.log(typeof 'Jay'); ==>string
-console.log(typeof 42); ==>#
var persons = [{
	firstName: 'Jay',
	lastName: 'Chou'
}];

//object in javascript

var person ={
	firstName: 'Jay',
	lastName: 'Chou',
	getName: function(){
		return this.firstName + ' '+ this.lastName;
	},
	address:{
		zip: 33333,
		street: '123 Main street'
	}
};

console.log(person.getName());
console.log(persons instanceof Array); ==> true
console.log(typeof persons) ==>object
// patterns in javascript -http://bit.ly/1de5qfT    http://bit.ly/latTe8t

//useful function feature consolation
//Functions are first-class object
//functions can be anonymous
//functions can be self-executing
//functions encapsulate and capture scope.
//closures
//module pattern
//common.JS module pattern
------------------------------------------------
(function(){
  
	var messages = ['Hello', 'there'];
  
	for(var i in messages){
    
	   setTimeout(function(){
    
		console.log(messages[i]);
  
	}, 1000);
  
	}

})();


==>there there
-------------------------------------------------
//concept of encapsulate and capture scope
//fixed solution
(function(){
  
	var messages = ['Hello', 'there'];
  
	var say = function(index) {
	   setTimeout(function(){
    
		console.log(messages[index]);
  
	}, 1);
  
	}
;
	for(var i in messages){
		say(i);
	}
})();


------------------------------------------------
//common pattern of closures
(function(){
  
	var messages = ['Hello', 'there'];
  
	var say = function(index) {
	   return function(){
    
		console.log(messages[index]);
  
	};
  
	}
;
	for(var i in messages){
		setTimeout(say(i),1000);
	}
})();

-------------------------------------------------
//module pattern
//commonJS nodejs (module export)
//commonJS module
//module.exports = function()
var Alert = (function(){
    var messages=[];
    return {
	add: function(message) {
	   messages.push(message);
	},
	log: function(){
	    console.log(messages);
	}
    };
})();

console.log(Alert);
Alert.add('hello');
Alert.add('there');
Alert.log();
----------
//commonJS module pattern form
//alert.js
module.exports = function(options){
var messages=[];
    return {
	add: function(message) {
	   messages.push(message);
	},
	log: function(){
	    console.log(messages.join(options.separator));
	}
    };
};
//index.js
var myAlert = require('alert')({
	separator: ' '
}):
-------------------------------------------------
//app.js
//self executing function
(function(){
	var message = 'Hello there';
	setTimeout(function(){
	console.log(message);
},1000);
})();

//vendor.js
if(typeof message !== 'undefined'){
console.log("BARRRFFF!!!");
}


var message = 'Hello there';
setTimeout(function(){
	console.log(message);
},1000);

//vendor.js
if(message){
	console.log("BARRRFFFFF!!!!");
}
------------------------------------------------------


------------------------------------------------------
<script>
 var person = {
 	firstname: 'Jay',
 	lastname: 'Chou',
 	age: 30,
 	children: ['Ken', 'Nick'],
 	address: {
 		street:'555 Something st',
 		city: 'Boston',
 		state: 'MA'
 	},
 	fullName: function(){
 		return this.firstname+" "+this.lastname;
 	}
 }
 console.log(person.fullName())
 console.log(person.children[1]);
</script>


//person object
/* var person = {
 	firstname: 'Jay',
 	lastname: 'Chou',
 	age: 30,
 	children: ['Ken', 'Nick'],
 	address: {
 		street:'555 Something st',
 		city: 'Boston',
 		state: 'MA'
 	},
 	fullName: function(){
 		return this.firstname+" "+this.lastname;
 	}
 }
 console.log(person.fullName())
 console.log(person.children[1]); */

 //object constructor
/*
 var apple = new Object();
 apple.color = 'red';
 apple.shape = 'round';

 apple.describe = function(){
 	return 'An apple is the color '+ this.color+' and the shape '+this.shape;
 }
 console.log(apple.describe());

 //constructor pattern

function Fruit(name, color, shape){
	this.name = name;
	this.color = color;
	this.shape = shape;

	this.describe = function(){
		return 'A ' + this.name + ' is the color '+ this.color+ ' and the shape '+ this.shape;
	}
}

var apple = new Fruit('apple','red', 'round');
var melon = new Fruit('melon','green', 'round')

console.log(melon.describe());

//array of object

var users = [
	{
		name: 'John Doe',
		age:30
	},
	{
		name: 'Mark Smith',
		age: 44
	},
	{
		name: 'Shelly Williams',
		age:20
	}
];

console.log(users[0]);
console.log(users[0].name);
*/



//Events
<!DOCTYPE html>
<html>
<head>
	<title>Learning Javascript</title>
	<link rel="stylesheet" href="style.css" />
	<!--<script src="main.js"></script> -->
</head>
<body onload="showDate()">
<div class="header">
	<h1 id='heading'>Learning JavaScript</h1>
	<p>With Jay</p>
</div>

<div class="container">
<!--<button onclick="doClick()">Click Me</button> 
<button onclick="this.innerHTML='You clicked!'">Click Me</button>
<button onclick="changeText()">Click Me</button> 
<button onclick="showDate()">Show Date</button>
-->

<button onmouseover="showDate()" onmouseout="clearDate()">Show Date</button>
<h1 id="time"></h1>
</div>

<script>
//person object
/* var person = {
 	firstname: 'Jay',
 	lastname: 'Chou',
 	age: 30,
 	children: ['Ken', 'Nick'],
 	address: {
 		street:'555 Something st',
 		city: 'Boston',
 		state: 'MA'
 	},
 	fullName: function(){
 		return this.firstname+" "+this.lastname;
 	}
 }
 console.log(person.fullName())
 console.log(person.children[1]); */

 //object constructor
/*
 var apple = new Object();
 apple.color = 'red';
 apple.shape = 'round';

 apple.describe = function(){
 	return 'An apple is the color '+ this.color+' and the shape '+this.shape;
 }
 console.log(apple.describe());

 //constructor pattern

function Fruit(name, color, shape){
	this.name = name;
	this.color = color;
	this.shape = shape;

	this.describe = function(){
		return 'A ' + this.name + ' is the color '+ this.color+ ' and the shape '+ this.shape;
	}
}

var apple = new Fruit('apple','red', 'round');
var melon = new Fruit('melon','green', 'round')

console.log(melon.describe());

//array of object

var users = [
	{
		name: 'John Doe',
		age:30
	},
	{
		name: 'Mark Smith',
		age: 44
	},
	{
		name: 'Shelly Williams',
		age:20
	}
];

console.log(users[0]);
console.log(users[0].name);
*/

function doClick(){
	alert('You clicked!');
}
function changeText(){
	var heading = document.getElementById('heading');
	heading.innerHTML = 'You clicked!';
}

function showDate(){
	var time = document.getElementById('time');
	time.innerHTML = Date();
}

function clearDate(){
	var time = document.getElementById('time');
	time.innerHTML = '';
}
</script>

</body>
</html>